#ifndef REACLIB_RATES_H
#define REACLIB_RATES_H

#include <AMReX.H>
#include <AMReX_Print.H>

#include <actual_network.H>

using namespace Rates;

using rate_t = Array1D<Real, 1, NumRates>;

using table_ener_t = Array1D<Real, NrateReaclib+1, NrateReaclib+NrateTabular>;

struct tf_t {
    Real T9;
    Real T9i;
    Real T943i;
    Real T923i;
    Real T913i;
    Real T913;
    Real T923;
    Real T953;
    Real lnT9;
};

AMREX_GPU_HOST_DEVICE AMREX_INLINE
tf_t evaluate_tfactors(const Real T)
{

    tf_t tf;
    tf.T9 = T / 1.e9_rt;
    tf.T9i = 1.0_rt / tf.T9;
    tf.T913 = std::cbrt(tf.T9);
    tf.T913i = 1.0_rt / tf.T913;
    tf.T923i = tf.T913i * tf.T913i;
    tf.T943i = tf.T9i * tf.T913i;
    tf.T923 = tf.T913 * tf.T913;
    tf.T953 = tf.T9 * tf.T923;
    tf.lnT9 = std::log(tf.T9);

    return tf;
}

<reaclib_rate_functions>(0)

<approx_rate_functions>(0)

AMREX_GPU_HOST_DEVICE AMREX_INLINE
void
fill_reaclib_rates(const tf_t& tfactors, rate_t& rates)
{

    Real rate;
    Real drate_dT;

    constexpr int do_T_derivatives = 0;

    <fill_reaclib_rates>(1)

    <fill_approx_rates>(1)

}

AMREX_GPU_HOST_DEVICE AMREX_INLINE
void
fill_reaclib_rates_with_derivs(const tf_t& tfactors, rate_t& rates, rate_t& dratesdT)
{

    Real rate;
    Real drate_dT;

    constexpr int do_T_derivatives = 1;

    <fill_reaclib_rates_with_derivs>(1)

    <fill_approx_rates_with_derivs>(1)

}

#endif
